# -*- coding: utf-8 -*-
"""ok.EMA_differences_and_long_short_trend_lines_for_LRCs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXf0S-MtzT_0Xgge4xRrn4vP8sCuO7r7
"""

import os
import numpy as np
import pandas as pd
import yfinance as yf
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import linregress
from datetime import datetime
import mplfinance as mpf

def plot_ema_differences(ticker, start_date="2020-01-01", end_date="2021-01-01"):
    """Main function to plot the differences between 50-day and 100-day EMAs and 100-day and 200-day EMAs using Seaborn."""

    df = fetch_or_load_data(ticker, start_date, end_date)

    # Calculate EMAs
    for ema_period in [50, 100, 200]:
        df[f'EMA_{ema_period}'] = df['Close'].ewm(span=ema_period, adjust=False).mean()

    # Calculate differences
    df['50-100 EMA Difference'] = df['EMA_50'] - df['EMA_100']
    df['100-200 EMA Difference'] = df['EMA_100'] - df['EMA_200']

    # Create a Seaborn chart
    plt.figure(figsize=(12, 6))
    sns.lineplot(data=df[['50-100 EMA Difference', '100-200 EMA Difference']], palette="tab10")
    plt.title(f'Differences Between EMAs for {ticker}')
    plt.xlabel('Date')
    plt.ylabel('Difference')
    plt.grid(True)

    plt.show()

def fetch_or_load_data(ticker, start_date, end_date):
    """Fetches the data for a given ticker and date range. If local CSV for today's date exists, data is read from it.
    Otherwise, it is fetched online and saved locally."""

    folder_path = "./data"
    today_str = datetime.today().strftime('%d_%m_%Y')
    file_name = f"{ticker}_{today_str}.csv"
    file_path = os.path.join(folder_path, file_name)

    if os.path.exists(file_path):
        data = pd.read_csv(file_path, index_col='Date', parse_dates=True)
    else:
        data = yf.download(ticker, start=start_date, end=end_date)
        data.to_csv(file_path)

    return data

# Sample call for visualization:
plot_ema_differences('SPY', start_date="2023-01-01", end_date="2024-01-01")

import os
import numpy as np
import pandas as pd
import yfinance as yf
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import linregress
from datetime import datetime
import mplfinance as mpf

def plot_ema_differences(ticker, start_date="2020-01-01", end_date="2021-01-01"):
    """Main function to plot the differences between EMAs using Seaborn."""

    df = fetch_or_load_data(ticker, start_date, end_date)

    # Calculate EMAs
    #ema_periods = [9, 50, 100, 200, 300]
    #ema_periods = [50, 100, 200, 300]
    ema_periods = [50, 100, 200]
    for ema_period in ema_periods:
        df[f'EMA_{ema_period}'] = df['Close'].ewm(span=ema_period, adjust=False).mean()

    # Calculate differences for all EMA pairs
    ema_differences = []
    for i in range(len(ema_periods)):
        for j in range(i + 1, len(ema_periods)):
            diff_col_name = f'{ema_periods[i]}-{ema_periods[j]} EMA Difference'
            df[diff_col_name] = df[f'EMA_{ema_periods[i]}'] - df[f'EMA_{ema_periods[j]}']
            ema_differences.append(diff_col_name)

    # Create a Seaborn chart
    plt.figure(figsize=(12, 6))
    sns.lineplot(data=df[ema_differences], palette="tab10")
    plt.title(f'Differences Between EMAs for {ticker}')
    plt.xlabel('Date')
    plt.ylabel('Difference')
    plt.grid(True)

    plt.show()

def fetch_or_load_data(ticker, start_date, end_date):
    """Fetches the data for a given ticker and date range. If local CSV for today's date exists, data is read from it.
    Otherwise, it is fetched online and saved locally."""

    folder_path = "./data"
    today_str = datetime.today().strftime('%d_%m_%Y')
    file_name = f"{ticker}_{today_str}.csv"
    file_path = os.path.join(folder_path, file_name)

    if os.path.exists(file_path):
        data = pd.read_csv(file_path, index_col='Date', parse_dates=True)
    else:
        data = yf.download(ticker, start=start_date, end=end_date)
        data.to_csv(file_path)

    return data

# Sample call for visualization:
plot_ema_differences('XLE', start_date="2023-01-01", end_date="2024-01-01")

import os
import numpy as np
import pandas as pd
import yfinance as yf
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime

def plot_ema_differences(ticker, start_date="2020-01-01", end_date="2021-01-01"):
    """Main function to plot the differences between specific EMAs using Seaborn."""

    df = fetch_or_load_data(ticker, start_date, end_date)

    # Calculate specific EMAs
    ema_periods = [9, 50, 100, 200, 300]
    for ema_period in ema_periods:
        df[f'EMA_{ema_period}'] = df['Close'].ewm(span=ema_period, adjust=False).mean()

    # Calculate and plot differences for specified EMA pairs
    #ema_pairs = [(9, 50), (50, 100), (100, 200), (200, 300)]
    ema_pairs = [(50, 100), (100, 200), (200, 300)]
    plt.figure(figsize=(12, 6))
    for ema1, ema2 in ema_pairs:
        diff_col_name = f'{ema1}-{ema2} EMA Difference'
        df[diff_col_name] = df[f'EMA_{ema1}'] - df[f'EMA_{ema2}']
        sns.lineplot(data=df[diff_col_name], label=f'{ema1}-{ema2} EMA Difference')

    plt.title(f'Differences Between Specific EMAs for {ticker}')
    plt.xlabel('Date')
    plt.ylabel('Difference')
    plt.legend()
    plt.grid(True)

    plt.show()

def fetch_or_load_data(ticker, start_date, end_date):
    """Fetches the data for a given ticker and date range. If local CSV for today's date exists, data is read from it.
    Otherwise, it is fetched online and saved locally."""

    folder_path = "./data"
    today_str = datetime.today().strftime('%d_%m_%Y')
    file_name = f"{ticker}_{today_str}.csv"
    file_path = os.path.join(folder_path, file_name)

    if os.path.exists(file_path):
        data = pd.read_csv(file_path, index_col='Date', parse_dates=True)
    else:
        data = yf.download(ticker, start=start_date, end=end_date)
        data.to_csv(file_path)

    return data

# Sample call for visualization:
plot_ema_differences('TSLY', start_date="2023-01-01", end_date="2024-01-01")

################## new stuff OCT 15

import os
import numpy as np
import pandas as pd
import yfinance as yf
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import linregress
from datetime import datetime
import mplfinance as mpf

def fetch_or_load_data(ticker, start_date, end_date):
    """Fetches the data for a given ticker and date range. If local CSV for today's date exists, data is read from it.
    Otherwise, it is fetched online and saved locally."""

    folder_path = "./data"
    today_str = datetime.today().strftime('%d_%m_%Y')
    file_name = f"{ticker}_{today_str}.csv"
    file_path = os.path.join(folder_path, file_name)

    if os.path.exists(file_path):
        data = pd.read_csv(file_path, index_col='Date', parse_dates=True)
    else:
        data = yf.download(ticker, start=start_date, end=end_date)
        data.to_csv(file_path)

    return data

def plot_linear_regression_with_mplfinance(ticker, use_log=True, period=144, start_date="2020-01-01", end_date="2021-01-01"):
    """Main function to plot linear regression, stock prices as candlesticks, and EMAs for a given ticker and date range using mplfinance."""

    df = fetch_or_load_data(ticker, start_date, end_date)

    if use_log:
        df['Value'] = np.log(df['Close'])
    else:
        df['Value'] = df['Close']

    df['Index'] = np.arange(len(df))

    for ema_period in [9, 50, 100, 200]:
        df[f'EMA_{ema_period}'] = df['Close'].ewm(span=ema_period, adjust=False).mean()

    slope, intercept, _, _, _ = linregress(df['Index'][-period:], df['Value'][-period:])
    df['RegValue'] = slope * df['Index'] + intercept
    df['Residual'] = df['Value'] - df['RegValue']
    std_dev = df['Residual'][-period:].std()

    ap = [
        mpf.make_addplot(np.exp(df['RegValue']) if use_log else df['RegValue'], color='blue')
    ]

    deviations = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3]
    for dev in deviations:
        if dev % 1 == 0:  # Check if the deviation is a full number
            color_upper = 'lightgrey'
            color_lower = 'lightgrey'
            linestyle = 'solid'
        else:
            color_upper = 'lightblue'
            color_lower = 'lightpink'
            linestyle = '--'

        df[f'Upper{dev}'] = (df['RegValue'] + dev * std_dev).apply(np.exp if use_log else lambda x: x)
        df[f'Lower{dev}'] = (df['RegValue'] - dev * std_dev).apply(np.exp if use_log else lambda x: x)

        ap.append(mpf.make_addplot(df[f'Upper{dev}'], color=color_upper, linestyle=linestyle))
        ap.append(mpf.make_addplot(df[f'Lower{dev}'], color=color_lower, linestyle=linestyle))

    for ema_period, color in zip([9, 50, 100, 200], ['lightblue', 'darkblue', 'orange', 'purple']):
        ap.append(mpf.make_addplot(df[f'EMA_{ema_period}'], color=color))

    mpf.plot(df, type='candle', style='charles', title=f'Linear Regression with EMAs for {ticker}', ylabel='Price', addplot=ap, volume=True, figsize=(15,10))

def fetch_or_load_data(ticker, start_date, end_date):
    """Fetches the data for a given ticker and date range. If local CSV for today's date exists, data is read from it.
    Otherwise, it is fetched online and saved locally."""

    folder_path = "./data"
    today_str = datetime.today().strftime('%d_%m_%Y')
    file_name = f"{ticker}_{today_str}.csv"
    file_path = os.path.join(folder_path, file_name)

    if os.path.exists(file_path):
        data = pd.read_csv(file_path, index_col='Date', parse_dates=True)
    else:
        data = yf.download(ticker, start=start_date, end=end_date)
        data.to_csv(file_path)

    return data

# Sample call for visualization:
plot_linear_regression_with_mplfinance('nvda', use_log=True, start_date="2023-01-01", end_date="2024-01-01")

import os
import numpy as np
import pandas as pd
import yfinance as yf
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import linregress
from datetime import datetime
import mplfinance as mpf

def calculate_moving_averages(df):
    """Calculate moving averages and add them to the dataframe."""
    for ema_period in [9, 50, 100, 200]:
        df[f'EMA_{ema_period}'] = df['Close'].ewm(span=ema_period, adjust=False).mean()
    return df


def calculate_linear_regression_channels(df, period, use_log=True):
    """Calculate linear regression channels for a given period and add them to the dataframe."""

    if use_log:
        df['Value'] = np.log(df['Close'])
    else:
        df['Value'] = df['Close']

    df['Index'] = np.arange(len(df))

    slope, intercept, _, _, _ = linregress(df['Index'][-period:], df['Value'][-period:])
    df['RegValue'] = slope * df['Index'] + intercept
    df['Residual'] = df['Value'] - df['RegValue']
    std_dev = df['Residual'][-period:].std()

    deviations = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3]
    for dev in deviations:
        if dev % 1 == 0:  # Check if the deviation is a full number
            color_upper = 'black'
            color_lower = 'black'
            linestyle = 'solid'
        else:
            color_upper = 'lightblue'
            color_lower = 'lightpink'
            linestyle = '--'

        df[f'Upper{dev}_{period}'] = (df['RegValue'] + dev * std_dev).apply(np.exp if use_log else lambda x: x)
        df[f'Lower{dev}_{period}'] = (df['RegValue'] - dev * std_dev).apply(np.exp if use_log else lambda x: x)

    return df

def plot_linear_regression_with_mplfinance(ticker, use_log=True, start_date="2020-01-01", end_date="2021-01-01"):
    """Main function to plot linear regression, stock prices as candlesticks, and EMAs for a given ticker and date range using mplfinance."""

    df = fetch_or_load_data(ticker, start_date, end_date)

    # Calculate linear regression channels and moving averages
    df = calculate_moving_averages(df)
    df = calculate_linear_regression_channels(df, 144, use_log)
    df = calculate_linear_regression_channels(df, 50, use_log)

    # Prepare data for plotting
    ap = []
    for period in [50,144]:
        #ap.append(mpf.make_addplot(np.exp(df[f'RegValue']) if use_log else df[f'RegValue'], color='blue'))

        #deviations = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3]
        deviations = [1,2]
        for dev in deviations:
            if dev % 1 == 0:  # Check if the deviation is a full number
                color_upper = 'lightblue'
                color_lower = 'lightpink'
                linestyle = 'solid'
            else:
                color_upper = 'lightblue'
                color_lower = 'lightpink'
                linestyle = '--'

            ap.append(mpf.make_addplot(df[f'Upper{dev}_{period}'], color=color_upper, linestyle=linestyle))
            ap.append(mpf.make_addplot(df[f'Lower{dev}_{period}'], color=color_lower, linestyle=linestyle))

    for ema_period, color in zip([9, 50, 100, 200], ['cyan', 'blue', 'green', 'red']):
        ap.append(mpf.make_addplot(df[f'EMA_{ema_period}'], color=color))

    mpf.plot(df, type='candle', style='charles', title=f'Linear Regression with EMAs for {ticker}', ylabel='Price', addplot=ap, volume=True, figsize=(15,10))

# Return a condensed version of the updated function for brevity
#plot_linear_regression_with_mplfinance
plot_linear_regression_with_mplfinance('spy', use_log=True, start_date="2023-01-01", end_date="2024-01-01")

